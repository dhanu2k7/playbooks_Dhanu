---
- name: Prepare execution-generic environment
  hosts: all
  gather_facts: false
  tasks:
   - name: set flags for CI SAP and DB
     shell: |
        #!/bin/sh
          LOGFILE=/tmp/saplog.log
          DATE=`date '+%m/%d/%Y %H:%M:%S %Z'`
              if [ -d /usr/sap ]; then
                    for dir in `ls -l /usr/sap/ | grep -v total | awk '{print $9}' | egrep -x '.{1,3}' | grep -oP "\w*[A-Z]+\w*"`
                    do
                      BOBJ_Inst=`find /usr/sap/${dir} -name sap_bobj |wc -l`
                        if [[ ${BOBJ_Inst} -ge 1 ]]; then
                             let BOBJ_Inst_Count=${BOBJ_Inst_Count}+1
                        else
                              let BOBJ_Inst_Count=${BOBJ_Inst_Count}+0
                            fi
                  done
              else
                let BOBJ_Inst_Count=${BOBJ_Inst_Count}+0
              fi
              if [ -e /usr/sap/hostctrl/exe/lssap ]; then
                  StdABAPJAVA_Inst_Count=`/usr/sap/hostctrl/exe/lssap |grep -v lssap |grep -v '\=\=' |grep -v SAPLOCALHOST |awk -F'|' -v OFS=',' '{print $1, $2}' |grep -v DAA|tr -d ' '|uniq |wc -l`
              else
                  StdABAPJAVA_Inst_Count=0
              fi
              if [ $BOBJ_Inst_Count -ge 1 ] || [ $StdABAPJAVA_Inst_Count -ge 1 ]; then
              {
                if [ $StdABAPJAVA_Inst_Count -ge 1 ]; then
                  {
                   echo SAP_FLAG="TRUE" >> $LOGFILE 2>&1
                  }
                elif [ $BOBJ_Inst_Count -ge 1 ]; then
                        {
                    echo SAP_FLAG="TRUE" >> $LOGFILE 2>&1
                  }
                else
                  {
                    echo SAP_FLAG="FALSE" >> $LOGFILE 2>&1
                  }
                fi
                }
              else
                {
                  echo SAP_FLAG="FALSE" >> $LOGFILE 2>&1
                }
              fi
              if [ -e /oracle ]; then
                 ORA_count=`ls -ld /oracle/*/sapdata* |awk -F'/' '{print $3}' |tr -d ' '|uniq |wc -l`
                 if [ $ORA_count -ge 1 ]; then
                   echo DB_FLAG="TRUE" >> $LOGFILE 2>&1
                 else
                   echo DB_FLAG="FALSE" >> $LOGFILE 2>&1
                 fi
              else
                 echo DB_FLAG="FALSE" >> $LOGFILE 2>&1
              fi

              if [ -e /usr/sap ]; then
                CI=`ps -ef | egrep -i 'ms.sap' `
                CI1=`ps -ef | egrep -i 'dw' `
                if [[ $CI -ge 1 ]] && [[ $CI1 -ge 1 ]]; then
                  echo CI_FLAG="TRUE" >> $LOGFILE 2>&1
                else
                  echo CI_FLAG="FALSE" >> $LOGFILE 2>&1
                fi
              else
                echo CI_FLAG="FALSE" >> $LOGFILE 2>&1
              fi
              cat $LOGFILE
            exit
     register: flag
     become: true
   - name: setting flags at ansible level
     ansible.builtin.set_fact:
        ciflag: "{{flag.stdout_lines | select('match', 'CI_FLAG')|join('=')|regex_replace('CI_FLAG=','')|lower|default('false')}}"
        dbflag: "{{flag.stdout_lines | select('match', 'DB_FLAG')|join('=')|regex_replace('DB_FLAG=','')|lower|default('false')}}"
        appflag: "{{flag.stdout_lines | select('match', 'SAP_FLAG')|join('=')|regex_replace('SAP_FLAG=','')|lower|default('false')}}"
     when: flag.stdout is defined
   - name: awk storing change for unix
     set_fact:
       awks:  "awk"
   - name: Verifying SAP services
     block:
      - name: Verifying CI
        shell: |
          #!/bin/sh
          LOGFILE=/tmp/SAPDB_StartStatus.log
          DATE=`date '+%m/%d/%Y %H:%M:%S %Z'
          sid={{ cisid }}
          if [ -z "$sid" ]; then
            for line in `/usr/sap/hostctrl/exe/lssap |grep -v lssap |grep -v '\=\=' |grep -v SAPLOCALHOST |{{awks}} -F'|' -v OFS=',' '{print $1, $2}' |tr -d ' ' |grep -v DAA |uniq |grep -i {{ sid }}`
              do
                SID_User="`echo $line| {{ awks }} -F',' '{print $1}'|tr '[:upper:]' '[:lower:]'`adm"
                SYSNO="`echo $line|{{ awks }} -F',' '{print $2}' |tr -d ' '`"
                x=1
              while [ $x -le 2 ]
              do
                Running_count=`su - $SID_User -c "/usr/sap/hostctrl/exe/sapcontrol -prot NI_HTTP -nr $SYSNO -function GetProcessList"|grep GREEN |wc -l`
                Stopped_count=`su - $SID_User -c "/usr/sap/hostctrl/exe/sapcontrol -prot NI_HTTP -nr $SYSNO -function GetProcessList"|grep GRAY |wc -l`
                echo "Running Count: $Running_count , Stopped count: $Stopped_count"
            action={{ sap_control_function }}
            if [[ "$action" == "start" ]]; then
              if [[ $Running_count -ge 1 ]] && [[ $Stopped_count -eq 0 ]] ; then
                  echo "INFO! SAP Application successfully Started  for SAP SYS NO :$SYSNO."
                  x=7
              else
                  echo "Error! SAP Application failed to start for SAP SYS NO :$SYSNO."
                  x=$(( $x + 1 ))
              fi
            elseif [[ "$action" == "stop" ]] ; then
              if [[ $Running_count -eq 0 ]] && [[ $Stopped_count -ge 1 ]] ; then
             		  echo "INFO! SAP Application is successfully stopped for SAP SYS NO :$SYSNO." >> $LOGFILE 2>&1
                  x=7
              else
                 echo "Error! SAP Application is FAILED to Stop for SAP SYS NO :$SYSNO." >> $LOGFILE 2>&1
                 x=$(( $x + 1 ))
              fi
            fi
           # fi
            if [[ $x -eq 3 ]] ; then
                echo "timed out during checking SAP status"
                exit 2
            fi
                done
               done
          else
              for line in `/usr/sap/hostctrl/exe/lssap |grep -v lssap |grep -v '\=\=' |grep -v SAPLOCALHOST |{{awks}} -F'|' -v OFS=',' '{print $1, $2}' |tr -d ' ' |grep -v DAA |uniq `
              do
                SID_User="`echo $line| {{ awks }} -F',' '{print $1}'|tr '[:upper:]' '[:lower:]'`adm"
                SYSNO="`echo $line|{{ awks }} -F',' '{print $2}' |tr -d ' '`"
                x=1
              while [ $x -le 2 ]
              do
                Running_count=`su - $SID_User -c "/usr/sap/hostctrl/exe/sapcontrol -prot NI_HTTP -nr $SYSNO -function GetProcessList"|grep GREEN |wc -l`
                Stopped_count=`su - $SID_User -c "/usr/sap/hostctrl/exe/sapcontrol -prot NI_HTTP -nr $SYSNO -function GetProcessList"|grep GRAY |wc -l`
                echo "Running Count: $Running_count , Stopped count: $Stopped_count"
            action={{ sap_control_function }}
            if [[ "$action" == "start" ]] ; then
              if [[ $Running_count -ge 1 ]] && [[ $Stopped_count -eq 0 ]] ; then
                  echo "INFO! SAP Application succesfully Started  for SAP SYS NO :$SYSNO."
                  x=7
              else
                  echo "Error! SAP Application not Running for SAP SYS NO :$SYSNO."
                  x=$(( $x + 1 ))
              fi
            elseif [[ "$action" == "stop" ]] ; then
              if [[ $Running_count -eq 0 ]] && [[ $Stopped_count -ge 1 ]] ; then
             		  echo "INFO! SAP Application is successfully stopped for SAP SYS NO :$SYSNO." >> $LOGFILE 2>&1
                  x=7
              else
                 echo "Error! SAP Application is FAILED to Stop for SAP SYS NO :$SYSNO." >> $LOGFILE 2>&1
                 x=$(( $x + 1 ))
              fi
            fi
           # fi
            if [[ $x -eq 3 ]] ; then
                echo "timed out during checking SAP status"
                exit 2
            fi
                done
               done
          exit
        register: cioutput_status
        become: yes
        when:
          - ciflag | bool
   - name: Verifying SAP services
     block:
      - name: Verifying SAP services
        shell: |
          #!/bin/sh
          LOGFILE=/tmp/SAPDB_StartStatus.log
          DATE=`date '+%m/%d/%Y %H:%M:%S %Z'
          sid={{ sapsid }}
          if [ -z "$sid" ]; then
            for line in `/usr/sap/hostctrl/exe/lssap |grep -v lssap |grep -v '\=\=' |grep -v SAPLOCALHOST |{{awks}} -F'|' -v OFS=',' '{print $1, $2}' |tr -d ' ' |grep -v DAA |uniq |grep -i {{ sid }}`
              do
                SID_User="`echo $line| {{ awks }} -F',' '{print $1}'|tr '[:upper:]' '[:lower:]'`adm"
                SYSNO="`echo $line|{{ awks }} -F',' '{print $2}' |tr -d ' '`"
                x=1
              while [ $x -le 2 ]
              do
                Running_count=`su - $SID_User -c "/usr/sap/hostctrl/exe/sapcontrol -prot NI_HTTP -nr $SYSNO -function GetProcessList"|grep GREEN |wc -l`
                Stopped_count=`su - $SID_User -c "/usr/sap/hostctrl/exe/sapcontrol -prot NI_HTTP -nr $SYSNO -function GetProcessList"|grep GRAY |wc -l`
                echo "Running Count: $Running_count , Stopped count: $Stopped_count"
            action={{ sap_control_function }}
            if [[ "$action" == "start" ]]; then
              if [[ $Running_count -ge 1 ]] && [[ $Stopped_count -eq 0 ]] ; then
                  echo "INFO! SAP Application successfully Started  for SAP SYS NO :$SYSNO."
                  x=7
              else
                  echo "Error! SAP Application failed to start for SAP SYS NO :$SYSNO."
                  x=$(( $x + 1 ))
              fi
            elseif [[ "$action" == "stop" ]] ; then
              if [[ $Running_count -eq 0 ]] && [[ $Stopped_count -ge 1 ]] ; then
             		  echo "INFO! SAP Application is successfully stopped for SAP SYS NO :$SYSNO." >> $LOGFILE 2>&1
                  x=7
              else
                 echo "Error! SAP Application is FAILED to Stop for SAP SYS NO :$SYSNO." >> $LOGFILE 2>&1
                 x=$(( $x + 1 ))
              fi
            fi
           # fi
            if [[ $x -eq 3 ]] ; then
                echo "timed out during checking SAP status"
                exit 2
            fi
                done
               done
          else
              for line in `/usr/sap/hostctrl/exe/lssap |grep -v lssap |grep -v '\=\=' |grep -v SAPLOCALHOST |{{awks}} -F'|' -v OFS=',' '{print $1, $2}' |tr -d ' ' |grep -v DAA |uniq `
              do
                SID_User="`echo $line| {{ awks }} -F',' '{print $1}'|tr '[:upper:]' '[:lower:]'`adm"
                SYSNO="`echo $line|{{ awks }} -F',' '{print $2}' |tr -d ' '`"
                x=1
              while [ $x -le 2 ]
              do
                Running_count=`su - $SID_User -c "/usr/sap/hostctrl/exe/sapcontrol -prot NI_HTTP -nr $SYSNO -function GetProcessList"|grep GREEN |wc -l`
                Stopped_count=`su - $SID_User -c "/usr/sap/hostctrl/exe/sapcontrol -prot NI_HTTP -nr $SYSNO -function GetProcessList"|grep GRAY |wc -l`
                echo "Running Count: $Running_count , Stopped count: $Stopped_count"
            action={{ sap_control_function }}
            if [[ "$action" == "start" ]] ; then
              if [[ $Running_count -ge 1 ]] && [[ $Stopped_count -eq 0 ]] ; then
                  echo "INFO! SAP Application succesfully Started  for SAP SYS NO :$SYSNO."
                  x=7
              else
                  echo "SAP Application failed to start for SAP SYS NO :$SYSNO."
                  x=$(( $x + 1 ))
              fi
            elseif [[ "$action" == "stop" ]] ; then
              if [[ $Running_count -eq 0 ]] && [[ $Stopped_count -ge 1 ]] ; then
             		  echo "INFO! SAP Application is successfully stopped for SAP SYS NO :$SYSNO." >> $LOGFILE 2>&1
                  x=7
              else
                 echo "Error! SAP Application is FAILED to Stop for SAP SYS NO :$SYSNO." >> $LOGFILE 2>&1
                 x=$(( $x + 1 ))
              fi
            fi
           # fi
            if [[ $x -eq 3 ]] ; then
                echo "timed out during checking SAP status"
                exit 2
            fi
                done
               done
          exit
        register: sapoutput_status
        become: yes
        when:
          - appflag | bool
   - name: check oracle is running  {{sid}}
     shell: |
        #!/bin/sh
        sid={{ orasid }}
        if [ -z "$sid" ]; then
        	echo "INFO! Checking the ORACLE Database...."
        	isMatched=false
        	for SIDI in `ls -ld /oracle/*/sapdata* |awk -F'/' '{print $3}' |tr -d ' '|uniq|grep -i {{sid}}`
        	do
        		for i in $SID; do
        			if [[ `echo $i |tr -d ' '` == $SIDI ]]; then
        				echo "SID entered MATCHED with SID Installed -- $i"
        				isMatched=true
        				ORA_User="ora`echo $SIDI |tr '[:upper:]' '[:lower:]'`"
                ORA_BIN=`find /oracle/ -name sqlplus |grep bin |grep $SIDI|head -1 |tr -d ' '`
                LSNR_BIN=`find /oracle -name lsnrctl |grep bin |grep $SIDI|head -1 |tr -d ' '`
        				if [[ ${ORA_BIN} != "" && ${LSNR_BIN} != "" ]]; then
        						## Wait for 1min
        						sleep 60
        							#
        						## Verify if ORACLE is Running
        						ora_count=`ps -ef |grep tnslsnr |grep -i $SIDI |grep -v grep|wc -l`
        						if [[ $ora_count -ge 1 ]] ; then
        							echo "INFO! ORACLE Database already Running for SID: $SIDI."
        							else
        								echo "Error! ORACLE Database Not Running for SID: $SIDI."
        								exit 2
        							fi
        						else
        							echo "Oracle Database not installed for sid ${SIDI} , Skipping DB Start Process... "
        			  fi
        	      echo "--------------------------------------------------------"
            	fi
        		done
        	  done
          if [[ $isMatched == false ]]; then
        		echo "SID entered by user DID NOT Matched with SID Installed -- $SID"
        	fi
        else
        	echo "INFO! Checking the ORACLE Database...."
        	isMatched=false
        	for SIDI in `ls -ld /oracle/*/sapdata* |awk -F'/' '{print $3}' |tr -d ' '|uniq  `
        	do
        		for i in $SID; do
        			if [[ `echo $i |tr -d ' '` == $SIDI ]]; then
        				echo "SID entered MATCHED with SID Installed -- $i"
        				isMatched=true
        				ORA_User="ora`echo $SIDI |tr '[:upper:]' '[:lower:]'`"
                ORA_BIN=`find /oracle/ -name sqlplus |grep bin |grep $SIDI|head -1 |tr -d ' '`
                LSNR_BIN=`find /oracle -name lsnrctl |grep bin |grep $SIDI|head -1 |tr -d ' '`
        				if [[ ${ORA_BIN} != "" && ${LSNR_BIN} != "" ]]; then
        						## Wait for 1min
        						sleep 60
        							#
        						## Verify if ORACLE is Running
        						ora_count=`ps -ef |grep tnslsnr |grep -i $SIDI |grep -v grep|wc -l`
        						if [[ $ora_count -ge 1 ]] ; then
        							echo "INFO! ORACLE Database already Running for SID: $SIDI."
        							else
        								echo "Error! ORACLE Database Not Running for SID: $SIDI."
        								exit 2
        							fi
        						else
        							echo "Oracle Database not installed for sid ${SIDI} , Skipping DB Start Process... "
        			  fi
        	      echo "--------------------------------------------------------"
            	fi
        		done
        	  done
     become: yes
     register: orastatus
     ignore_errors: true
     when:
       - ora_flag |bool
