---
- name: Create non admin user on Active Directory and add in local groups
  block:
    - name: Create user
      ansible.windows.win_command:
        cmd: net user "{{ sl1_account_name }}" "{{ pwd }}" /add /domain /yes
      when: create_ad_user == "true"

    # - name: Retrieve DNS suffix on Windows
    #   ansible.windows.win_shell: |
    #     ipconfig /all | Select-String "DNS Suffix Search List" | ForEach-Object { $_.ToString().Split(':')[1].Trim() }
    #   register: suffix_dns
    #   changed_when: false

    # - name: Debug dns suffixes
    #   debug:
    #     var: suffix_dns.stdout_lines[0].split('.')[0]
    #   register: suffix_dns_result

    - name: Store the DNS suffix in a variable
      set_fact:
        domain_suffixe: "{{ ansible_windows_domain}}"

    - name: Add user in local groups
      win_group_membership:
        name: "{{item}}"
        members:
          - "{{domain_suffixe}}\\{{sl1_account_name}}"
        state: present

      loop:
        - Distributed COM Users
        - Event Log Readers
        - Performance Log Users
        - Performance Monitor Users
        - Remote Management Users
  rescue:
    - name: Something in block failed. Generate error.
      include_role:
        name: returncode
      vars:
        # noqa var-naming[no-role-prefix]
        rc_support: account
        rc_group: framework_playbook
        rc_number: 3007
        rc_message: Failed to create user on AD and add in local group

# - name: Configuration of winrm permissions
#   block:
#     - name: Set winrm permissions for the user
#       win_shell: |
#         $user_account="{{ domain_suffixe }}\{{ username }}"
#         $objUser = $null
#         $sid = $null
#         $user = $null
#         $domain = $null
#         $sid_obj = $null
#         if ($user_account.Contains("'\'")) {
#             $domainaccount = $user_account.Split("'\'")
#             $domain = $domainaccount[0]
#             $user = $domainaccount[1]
#         } elseif ($user_account.Contains('@')) {
#             $user, $domain = $user_account.Split('@') # both results will be send to the appropriate variable
#         } else {
#             $user = $user_account
#         }
#         try {
#             if (($domain -ne $null) -and ($domain.Length -gt 0)) {

#                 $objUser = New-Object System.Security.Principal.NTAccount($domain, $user)
#             } else {
#                 $objUser = New-Object System.Security.Principal.NTAccount($user)
#             }
#             if ($objUser -ne $null) {
#                 $sid_obj = $objUser.Translate([System.Security.Principal.SecurityIdentifier])
#                 $sid = $sid_obj.Value
#                 $sid = $sid.ToString()
#             }
#         } catch {
#             throw "GetAccountSID: Exception caught while translating account to SID - detail - $_"
#         }
#         echo $sid
#         Set-Item -Path WSMan:\localhost\Service\RootSDDL -Value "O:NSG:BAD:P(A;;GA;;;BA)(A;;GXGR;;;$sid)(A;;GA;;;IU)S:P(AU;FA;GA;;;WD)(AU;SA;GXGW;;;WD)" -Force
#   rescue:
#     - name: Something in block failed. Generate error.
#       include_role:
#         name: returncode
#       vars:
#         # noqa var-naming[no-role-prefix]
#         rc_support: account
#         rc_group: framework_playbook
#         rc_number: 3007
#         rc_message: Failed to configure winrm

# - name: Configuration of wmi and restart service
#   block:
#     - name: Copy a script file
#       win_copy:
#         src: "{{ wmi_script }}"
#         dest: "{{ dest_path }}\\Set-WmiNamespaceSecurity.ps1"

- name: Configuration of WMI
  block:
    - name: Config security for RootSDDL
      ansible.windows.win_powershell:
        script: "{{ lookup('file', 'Set-WmiNamespaceSecurity.ps1') }}"
        parameters:
          user: "{{ sl1_account_name }}"
      notify:
        - Restart wmi
      vars:
        ansible_become_user: "{{ ansible_user_id }}"
        ansible_become: true
        ansible_become_method: runas
    - name: Allow user to check services
      ansible.windows.win_powershell:
        script: "{{ lookup('file', 'Set-ServicePermissions.ps1') }}"
        parameters:
          user: "{{ sl1_account_name }}"
      vars:
        become_user: "{{ ansible_user_id }}"
        become: true
        become_method: runas
  rescue:
    - name: Something in block failed. Generate error.
      include_role:
        name: returncode
      vars:
        # noqa var-naming[no-role-prefix]
        rc_support: account
        rc_group: framework_playbook
        rc_number: 3007
        rc_message: "Failed to configure WMI and restart service"
  when:
    - not sl1_account_admin | bool
    - sl1_manage_permissions | bool
    - sl1_account_state != "absent"